CREATE DEFINER=`root`@`localhost` PROCEDURE `CreateUserAndStoreSecret`(
    IN p_username VARCHAR(255),
    IN p_password VARCHAR(255),
    IN p_employeeId INT,
    IN p_generatedSalt VARCHAR(256)
)
BEGIN
    DECLARE generatedSalt VARCHAR(255);
    DECLARE hashedPassword VARCHAR(255);
    DECLARE userFirstName VARCHAR(255);
    DECLARE userMiddleName VARCHAR(255);
    DECLARE userLastName VARCHAR(255);
    DECLARE passwordSimilarityFirstName INT;
    DECLARE passwordSimilarityMiddleName INT;
    DECLARE passwordSimilarityLastName INT;
	DECLARE employeeCount INT;
	-- Retrieve user details
		SELECT 
			`Employee First Name`, 
			`Employee Middle Name`, 
			`Employee Last Name`
		INTO 
			userFirstName, 
			userMiddleName, 
			userLastName
		FROM 
			employee
		WHERE 
			ID = p_employeeId;
    -- Check if the employee already exists based on the combination of names
    SET employeeCount = EmployeeExists(userFirstName, userMiddleName, userLastName);

    -- If the combination exists, raise an exception
    IF employeeCount < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Employee with2222 the same name combination already exists';
    ELSE
		
		IF NOT isValidPassword(p_password) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Password does not meet the required criteria';
		END IF;
		-- Check if the username is equal to the user's names
		IF 
			LOCATE(UPPER(p_username), UPPER(userFirstName)) > 0 OR
			LOCATE(UPPER(p_username), UPPER(userMiddleName)) > 0 OR
			LOCATE(UPPER(p_username), UPPER(userLastName)) > 0
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Username cannot be the same as the user''s first name, middle name, or last name';
		END IF;
		-- Check the similarity between the password and the user's names
		SET passwordSimilarityFirstName = LEVENSHTEIN_RATIO(p_password, userFirstName);
		SET passwordSimilarityMiddleName = LEVENSHTEIN_RATIO(p_password, userMiddleName);
		SET passwordSimilarityLastName = LEVENSHTEIN_RATIO(p_password, userLastName);

		-- Check if the password is too similar to the user's names
		IF 
			passwordSimilarityFirstName >= 40 OR
			passwordSimilarityMiddleName >= 40 OR
			passwordSimilarityLastName >= 40
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Password is too similar to the user''s first name, middle name, or last name';
		END IF;

		-- Continue with the rest of the procedure

		-- Generate a random salt
		SET generatedSalt = p_generatedSalt;

		-- Concatenate password and salt, then hash the salted password
		SET hashedPassword = SHA2(CONCAT(p_password, generatedSalt), 256);

		-- Insert into employeelogin table
		INSERT INTO employeelogin (Username, Password, EmployeeId) VALUES (p_username, hashedPassword, p_employeeId);

		-- Call the procedure to encrypt and store the secret
		CALL EncryptAndStoreSecret(generatedSalt, p_username);
    END IF;
END